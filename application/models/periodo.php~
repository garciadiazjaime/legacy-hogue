<?php
class Periodo extends CI_Model {
	var $start_week;
	var $end_week;
	var $year;
	var $bank_amount = 0;
	var $status = 1;
	
	function __construct()
	{
		parent::__construct();
	}
	
	public function create()
	{	
		$msg = '';
		$this->start_week = $_POST['week_from'];
		$this->end_week = $_POST['week_until'];
		$this->year = date('Y');
		if($this->validateCreation($this->year)){
			$msg = ($this->db->insert('periodo', $this)) ? 
				'Periodo guardado':
				'El periodo no se pudo crear, por favor av&iacute;sanos info@mintitmedia.com';
		}else
			$msg = 'El periodo no se pudo crear, Ya existe un periodo para el A&ntilde;o '.$this->year;
		return $msg;
		
	}

	public function edit($id)
	{	
		$msg = '';
		$this->start_week = $_POST['week_from'];
		$this->end_week = $_POST['week_until'];
		$this->year = date('Y');
		if($this->validateEdit($id)){
			$this->db->where('id',$id);
			$msg = ($this->db->update('periodo', $this)) ? 
				'Periodo guardado':
				'El periodo no se pudo crear, por favor av&iacute;sanos info@mintitmedia.com';
		}else
			$msg = 'El periodo no se pudo crear, Ya existe un periodo para el A&ntilde;o '.$this->year;
		return $msg;
		
	}
	
	public function delete($id)
	{	
		$msg = '';
		$this->status = 0;
		if($this->validateEdit($id)){
			$this->db->where('id',$id);
			$msg = ($this->db->update('periodo', $this)) ? 
				'Periodo eliminado':
				'El periodo no se pudo eliminar, por favor av&iacute;sanos info@mintitmedia.com';
		}else
			$msg = 'El periodo no se pudo eliminar. EL periodo estÃ¡ siendo utilizado';
		return $msg;
		
	}

	public function validateCreation($year)
	{
		$query = $this->db->query("select id FROM periodo WHERE year=$year and status=1");
		$result = $query->result();		
		if(sizeof($result))
			return false;
		return true;
	}

	public function validateEdit($id)
	{
		$query_ahorro = $this->db->query("select id FROM ahorro WHERE periodo_id = $id");
		$ahorro = $query_ahorro->result();	
		$query_prestamo = $this->db->query("select id FROM prestamo WHERE periodo_id = $id");
		$prestamo = $query_prestamo->result();	
		if(sizeof($ahorro) || sizeof($prestamo))
			return false;
		return true;
	}
	
	public function validar_nomina()
	{
		$week_to_validate = $_POST['week_to_validate'];
		$file_to_validate = $_POST['file_to_validate'];
		echo $file_to_validate;
		$sql = "SELECT u.no_emp as no_emp, 
				IFNULL( SUM( p.monto_pago ) , 0 ) AS desc_prestamo, 
				IFNULL( a.monto, 0 ) AS desc_ahorro
			FROM user u
				LEFT JOIN ahorro a ON u.id = a.user_id
				LEFT JOIN prestamo p ON u.id = p.user_id
			WHERE (
				(a.status =1 OR a.status =2)
				AND a.year ='".date('Y')."'
			)
			OR (p.year ='".date('Y')."'
				AND (p.status =1 OR p.status =2)
			)
			AND u.status =1
			GROUP BY u.id";
		$query = $this->db->query($sql);

		if ($query->num_rows() > 0)
		{	
			foreach ($query->result() as $row)
			{
			}
		}

		$query_ahorro = $this->db->query("select id FROM ahorro WHERE periodo_id = $id");
		$ahorro = $query_ahorro->result();	
		$query_prestamo = $this->db->query("select id FROM prestamo WHERE periodo_id = $id");
		$prestamo = $query_prestamo->result();	
		if(sizeof($ahorro) || sizeof($prestamo))
			return false;
		return true;
	}
}
